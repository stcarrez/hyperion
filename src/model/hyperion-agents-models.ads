-----------------------------------------------------------------------
--  Hyperion.Agents.Models -- Hyperion.Agents.Models
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-spec.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 1095
-----------------------------------------------------------------------
--  Copyright (C) 2018 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
pragma Warnings (Off);
with ADO.Sessions;
with ADO.Objects;
with ADO.Statements;
with ADO.SQL;
with ADO.Schemas;
with Ada.Calendar;
with Ada.Containers.Vectors;
with Ada.Strings.Unbounded;
with Util.Beans.Objects;
with Util.Beans.Basic.Lists;
pragma Warnings (On);
package Hyperion.Agents.Models is

   pragma Style_Checks ("-mr");

   type Agent_Ref is new ADO.Objects.Object_Ref with null record;

   --  --------------------
   --  The Agent table holds the information about a monitoring agent
   --  who is allowed to connect to the Hyperion server.
   --  --------------------
   --  Create an object key for Agent.
   function Agent_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Agent from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Agent_Key (Id : in String) return ADO.Objects.Object_Key;

   Null_Agent : constant Agent_Ref;
   function "=" (Left, Right : Agent_Ref'Class) return Boolean;

   --  Set the agent identifier
   procedure Set_Id (Object : in out Agent_Ref;
                     Value  : in ADO.Identifier);

   --  Get the agent identifier
   function Get_Id (Object : in Agent_Ref)
                 return ADO.Identifier;

   --  Set the agent host name
   procedure Set_Hostname (Object : in out Agent_Ref;
                           Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Hostname (Object : in out Agent_Ref;
                           Value : in String);

   --  Get the agent host name
   function Get_Hostname (Object : in Agent_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Hostname (Object : in Agent_Ref)
                 return String;

   --  Set the IP address
   procedure Set_Ip (Object : in out Agent_Ref;
                     Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Ip (Object : in out Agent_Ref;
                     Value : in String);

   --  Get the IP address
   function Get_Ip (Object : in Agent_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Ip (Object : in Agent_Ref)
                 return String;

   --  Set the agent key
   procedure Set_Key (Object : in out Agent_Ref;
                      Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Key (Object : in out Agent_Ref;
                      Value : in String);

   --  Get the agent key
   function Get_Key (Object : in Agent_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Key (Object : in Agent_Ref)
                 return String;

   --  Set the date when the agent was registered
   procedure Set_Create_Date (Object : in out Agent_Ref;
                              Value  : in Ada.Calendar.Time);

   --  Get the date when the agent was registered
   function Get_Create_Date (Object : in Agent_Ref)
                 return Ada.Calendar.Time;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Agent_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Agent_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Agent_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Agent_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Agent_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (From : in Agent_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   AGENT_TABLE : constant ADO.Schemas.Class_Mapping_Access;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Agent_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Agent_Ref;
                   Into   : in out Agent_Ref);




private
   AGENT_NAME : aliased constant String := "hyperion_agent";
   COL_0_1_NAME : aliased constant String := "id";
   COL_1_1_NAME : aliased constant String := "hostname";
   COL_2_1_NAME : aliased constant String := "ip";
   COL_3_1_NAME : aliased constant String := "key";
   COL_4_1_NAME : aliased constant String := "create_date";

   AGENT_DEF : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 5,
      Table => AGENT_NAME'Access,
      Members => (
         1 => COL_0_1_NAME'Access,
         2 => COL_1_1_NAME'Access,
         3 => COL_2_1_NAME'Access,
         4 => COL_3_1_NAME'Access,
         5 => COL_4_1_NAME'Access
)
     );
   AGENT_TABLE : constant ADO.Schemas.Class_Mapping_Access
      := AGENT_DEF'Access;

   Null_Agent : constant Agent_Ref
      := Agent_Ref'(ADO.Objects.Object_Ref with null record);

   type Agent_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => AGENT_DEF'Access)
   with record
       Hostname : Ada.Strings.Unbounded.Unbounded_String;
       Ip : Ada.Strings.Unbounded.Unbounded_String;
       Key : Ada.Strings.Unbounded.Unbounded_String;
       Create_Date : Ada.Calendar.Time;
   end record;

   type Agent_Access is access all Agent_Impl;

   overriding
   procedure Destroy (Object : access Agent_Impl);

   overriding
   procedure Find (Object  : in out Agent_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   overriding
   procedure Load (Object  : in out Agent_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Agent_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);

   overriding
   procedure Save (Object  : in out Agent_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);

   procedure Create (Object  : in out Agent_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Delete (Object  : in out Agent_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   procedure Set_Field (Object : in out Agent_Ref'Class;
                        Impl   : out Agent_Access);
end Hyperion.Agents.Models;
