-----------------------------------------------------------------------
--  Hyperion.Hosts.Models -- Hyperion.Hosts.Models
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-spec.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 1095
-----------------------------------------------------------------------
--  Copyright (C) 2017 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
pragma Warnings (Off);
with ADO.Sessions;
with ADO.Objects;
with ADO.Statements;
with ADO.SQL;
with ADO.Schemas;
with Ada.Calendar;
with Ada.Containers.Vectors;
with Ada.Strings.Unbounded;
with Util.Beans.Objects;
with Util.Beans.Objects.Enums;
with Util.Beans.Basic.Lists;
pragma Warnings (On);
package Hyperion.Hosts.Models is

   pragma Style_Checks ("-mr");

   type Status_Type is (HOST_UNREGISTERED, HOST_ACTIVE, HOST_OFFLINE, HOST_RETIRED);
   for Status_Type use (HOST_UNREGISTERED => 0, HOST_ACTIVE => 1, HOST_OFFLINE => 2, HOST_RETIRED => 3);
   package Status_Type_Objects is
      new Util.Beans.Objects.Enums (Status_Type);

   type Description_Ref is new ADO.Objects.Object_Ref with null record;

   type Host_Ref is new ADO.Objects.Object_Ref with null record;

   type Host_Info_Ref is new ADO.Objects.Object_Ref with null record;

   --  Create an object key for Description.
   function Description_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Description from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Description_Key (Id : in String) return ADO.Objects.Object_Key;

   Null_Description : constant Description_Ref;
   function "=" (Left, Right : Description_Ref'Class) return Boolean;

   --  Set the identifier
   procedure Set_Id (Object : in out Description_Ref;
                     Value  : in ADO.Identifier);

   --  Get the identifier
   function Get_Id (Object : in Description_Ref)
                 return ADO.Identifier;
   --
   function Get_Version (Object : in Description_Ref)
                 return Integer;

   --  Set the description text
   procedure Set_Content (Object : in out Description_Ref;
                          Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Content (Object : in out Description_Ref;
                          Value : in String);

   --  Get the description text
   function Get_Content (Object : in Description_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Content (Object : in Description_Ref)
                 return String;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Description_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Description_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Description_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Description_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Description_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (From : in Description_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   DESCRIPTION_TABLE : constant ADO.Schemas.Class_Mapping_Access;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Description_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Description_Ref;
                   Into   : in out Description_Ref);

   --  Create an object key for Host.
   function Host_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Host from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Host_Key (Id : in String) return ADO.Objects.Object_Key;

   Null_Host : constant Host_Ref;
   function "=" (Left, Right : Host_Ref'Class) return Boolean;

   --  Set the host identifier
   procedure Set_Id (Object : in out Host_Ref;
                     Value  : in ADO.Identifier);

   --  Get the host identifier
   function Get_Id (Object : in Host_Ref)
                 return ADO.Identifier;
   --
   function Get_Version (Object : in Host_Ref)
                 return Integer;

   --  Set the host name
   procedure Set_Name (Object : in out Host_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Name (Object : in out Host_Ref;
                       Value : in String);

   --  Get the host name
   function Get_Name (Object : in Host_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Name (Object : in Host_Ref)
                 return String;

   --  Set the IPv4 address
   procedure Set_Ip (Object : in out Host_Ref;
                     Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Ip (Object : in out Host_Ref;
                     Value : in String);

   --  Get the IPv4 address
   function Get_Ip (Object : in Host_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Ip (Object : in Host_Ref)
                 return String;

   --  Set the host identification key
   procedure Set_Key (Object : in out Host_Ref;
                      Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Key (Object : in out Host_Ref;
                      Value : in String);

   --  Get the host identification key
   function Get_Key (Object : in Host_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Key (Object : in Host_Ref)
                 return String;

   --  Set the host creation date
   procedure Set_Create_Date (Object : in out Host_Ref;
                              Value  : in Ada.Calendar.Time);

   --  Get the host creation date
   function Get_Create_Date (Object : in Host_Ref)
                 return Ada.Calendar.Time;

   --  Set the serial number
   procedure Set_Serial (Object : in out Host_Ref;
                         Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Serial (Object : in out Host_Ref;
                         Value : in String);

   --  Get the serial number
   function Get_Serial (Object : in Host_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Serial (Object : in Host_Ref)
                 return String;

   --  Set host description text
   procedure Set_Description (Object : in out Host_Ref;
                              Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Description (Object : in out Host_Ref;
                              Value : in String);

   --  Get host description text
   function Get_Description (Object : in Host_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Description (Object : in Host_Ref)
                 return String;

   --  Set the host status type
   procedure Set_Status (Object : in out Host_Ref;
                         Value  : in Hyperion.Hosts.Models.Status_Type);

   --  Get the host status type
   function Get_Status (Object : in Host_Ref)
                 return Hyperion.Hosts.Models.Status_Type;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Host_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Host_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Host_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Host_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Host_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (From : in Host_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   HOST_TABLE : constant ADO.Schemas.Class_Mapping_Access;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Host_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Host_Ref;
                   Into   : in out Host_Ref);

   --  Create an object key for Host_Info.
   function Host_Info_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Host_Info from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Host_Info_Key (Id : in String) return ADO.Objects.Object_Key;

   Null_Host_Info : constant Host_Info_Ref;
   function "=" (Left, Right : Host_Info_Ref'Class) return Boolean;

   --
   procedure Set_Id (Object : in out Host_Info_Ref;
                     Value  : in ADO.Identifier);

   --
   function Get_Id (Object : in Host_Info_Ref)
                 return ADO.Identifier;
   --
   function Get_Version (Object : in Host_Info_Ref)
                 return Integer;

   --  Set the description index
   procedure Set_Index (Object : in out Host_Info_Ref;
                        Value  : in Integer);

   --  Get the description index
   function Get_Index (Object : in Host_Info_Ref)
                 return Integer;

   --
   procedure Set_Host (Object : in out Host_Info_Ref;
                       Value  : in Hyperion.Hosts.Models.Host_Ref'Class);

   --
   function Get_Host (Object : in Host_Info_Ref)
                 return Hyperion.Hosts.Models.Host_Ref'Class;

   --
   procedure Set_Desc (Object : in out Host_Info_Ref;
                       Value  : in Hyperion.Hosts.Models.Description_Ref'Class);

   --
   function Get_Desc (Object : in Host_Info_Ref)
                 return Hyperion.Hosts.Models.Description_Ref'Class;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Host_Info_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Host_Info_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Host_Info_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Host_Info_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Host_Info_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (From : in Host_Info_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   HOST_INFO_TABLE : constant ADO.Schemas.Class_Mapping_Access;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Host_Info_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Host_Info_Ref;
                   Into   : in out Host_Info_Ref);




private
   DESCRIPTION_NAME : aliased constant String := "hyperion_host_desc";
   COL_0_1_NAME : aliased constant String := "id";
   COL_1_1_NAME : aliased constant String := "version";
   COL_2_1_NAME : aliased constant String := "content";

   DESCRIPTION_DEF : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 3,
      Table => DESCRIPTION_NAME'Access,
      Members => (
         1 => COL_0_1_NAME'Access,
         2 => COL_1_1_NAME'Access,
         3 => COL_2_1_NAME'Access
)
     );
   DESCRIPTION_TABLE : constant ADO.Schemas.Class_Mapping_Access
      := DESCRIPTION_DEF'Access;

   Null_Description : constant Description_Ref
      := Description_Ref'(ADO.Objects.Object_Ref with null record);

   type Description_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => DESCRIPTION_DEF'Access)
   with record
       Version : Integer;
       Content : Ada.Strings.Unbounded.Unbounded_String;
   end record;

   type Description_Access is access all Description_Impl;

   overriding
   procedure Destroy (Object : access Description_Impl);

   overriding
   procedure Find (Object  : in out Description_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   overriding
   procedure Load (Object  : in out Description_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Description_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);

   overriding
   procedure Save (Object  : in out Description_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);

   procedure Create (Object  : in out Description_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Delete (Object  : in out Description_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   procedure Set_Field (Object : in out Description_Ref'Class;
                        Impl   : out Description_Access);
   HOST_NAME : aliased constant String := "hyperion_host";
   COL_0_2_NAME : aliased constant String := "id";
   COL_1_2_NAME : aliased constant String := "version";
   COL_2_2_NAME : aliased constant String := "name";
   COL_3_2_NAME : aliased constant String := "ip";
   COL_4_2_NAME : aliased constant String := "key";
   COL_5_2_NAME : aliased constant String := "create_date";
   COL_6_2_NAME : aliased constant String := "serial";
   COL_7_2_NAME : aliased constant String := "description";
   COL_8_2_NAME : aliased constant String := "status";

   HOST_DEF : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 9,
      Table => HOST_NAME'Access,
      Members => (
         1 => COL_0_2_NAME'Access,
         2 => COL_1_2_NAME'Access,
         3 => COL_2_2_NAME'Access,
         4 => COL_3_2_NAME'Access,
         5 => COL_4_2_NAME'Access,
         6 => COL_5_2_NAME'Access,
         7 => COL_6_2_NAME'Access,
         8 => COL_7_2_NAME'Access,
         9 => COL_8_2_NAME'Access
)
     );
   HOST_TABLE : constant ADO.Schemas.Class_Mapping_Access
      := HOST_DEF'Access;

   Null_Host : constant Host_Ref
      := Host_Ref'(ADO.Objects.Object_Ref with null record);

   type Host_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => HOST_DEF'Access)
   with record
       Version : Integer;
       Name : Ada.Strings.Unbounded.Unbounded_String;
       Ip : Ada.Strings.Unbounded.Unbounded_String;
       Key : Ada.Strings.Unbounded.Unbounded_String;
       Create_Date : Ada.Calendar.Time;
       Serial : Ada.Strings.Unbounded.Unbounded_String;
       Description : Ada.Strings.Unbounded.Unbounded_String;
       Status : Hyperion.Hosts.Models.Status_Type;
   end record;

   type Host_Access is access all Host_Impl;

   overriding
   procedure Destroy (Object : access Host_Impl);

   overriding
   procedure Find (Object  : in out Host_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   overriding
   procedure Load (Object  : in out Host_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Host_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);

   overriding
   procedure Save (Object  : in out Host_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);

   procedure Create (Object  : in out Host_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Delete (Object  : in out Host_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   procedure Set_Field (Object : in out Host_Ref'Class;
                        Impl   : out Host_Access);
   HOST_INFO_NAME : aliased constant String := "hyperion_host_info";
   COL_0_3_NAME : aliased constant String := "id";
   COL_1_3_NAME : aliased constant String := "version";
   COL_2_3_NAME : aliased constant String := "index";
   COL_3_3_NAME : aliased constant String := "host_id";
   COL_4_3_NAME : aliased constant String := "desc_id";

   HOST_INFO_DEF : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 5,
      Table => HOST_INFO_NAME'Access,
      Members => (
         1 => COL_0_3_NAME'Access,
         2 => COL_1_3_NAME'Access,
         3 => COL_2_3_NAME'Access,
         4 => COL_3_3_NAME'Access,
         5 => COL_4_3_NAME'Access
)
     );
   HOST_INFO_TABLE : constant ADO.Schemas.Class_Mapping_Access
      := HOST_INFO_DEF'Access;

   Null_Host_Info : constant Host_Info_Ref
      := Host_Info_Ref'(ADO.Objects.Object_Ref with null record);

   type Host_Info_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => HOST_INFO_DEF'Access)
   with record
       Version : Integer;
       Index : Integer;
       Host : Hyperion.Hosts.Models.Host_Ref;
       Desc : Hyperion.Hosts.Models.Description_Ref;
   end record;

   type Host_Info_Access is access all Host_Info_Impl;

   overriding
   procedure Destroy (Object : access Host_Info_Impl);

   overriding
   procedure Find (Object  : in out Host_Info_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   overriding
   procedure Load (Object  : in out Host_Info_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Host_Info_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);

   overriding
   procedure Save (Object  : in out Host_Info_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);

   procedure Create (Object  : in out Host_Info_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Delete (Object  : in out Host_Info_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   procedure Set_Field (Object : in out Host_Info_Ref'Class;
                        Impl   : out Host_Info_Access);
end Hyperion.Hosts.Models;
