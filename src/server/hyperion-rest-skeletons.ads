--  Hyperion API
--  Hyperion Monitoring API The monitoring agent is first registered so that the server knows it as well as its security key.  Each host are then registered by a monitoring agent. 
--
--  OpenAPI spec version: 1.0.0
--  Contact: Stephane.Carrez@gmail.com
--
--  NOTE: This package is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
--  https://github.com/swagger-api/swagger-codegen.git
--  Do not edit the class manually.
with Swagger.Servers;
with Hyperion.Rest.Models;
with Security.Permissions;
package Hyperion.Rest.Skeletons is
   use Hyperion.Rest.Models;
   type Server_Type is limited interface;

   --  Register a new monitoring agent
   package ACL_Agent_Register is new Security.Permissions.Definition ("agent:register");

   --  Register and create a host
   package ACL_Create_Host is new Security.Permissions.Definition ("create:host");

   --  Update a new host
   package ACL_Write_Host is new Security.Permissions.Definition ("write:host");

   --  Read a host information
   package ACL_Read_Host is new Security.Permissions.Definition ("read:host");



   --  Register a monitoring agent
   --  Register a new monitoring agent in the system
   procedure Register_Agent
      (Server : in out Server_Type;
       Name : in Swagger.UString;
       Ip : in Swagger.UString;
       Agent_Key : in Swagger.UString;
       Result  : out Hyperion.Rest.Models.Agent_Type;
       Context : in out Swagger.Servers.Context_Type) is abstract;

   --  Create a host
   --  Register a new host in the monitoring system
   procedure Create_Host
      (Server : in out Server_Type;
       Name : in Swagger.UString;
       Ip : in Swagger.UString;
       Host_Key : in Swagger.UString;
       Result  : out Hyperion.Rest.Models.Host_Type;
       Context : in out Swagger.Servers.Context_Type) is abstract;

   generic
      type Implementation_Type is limited new Server_Type with private;
   package Skeleton is

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class);


      --  Register a monitoring agent
      procedure Register_Agent
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Create a host
      procedure Create_Host
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);

   end Skeleton;

   generic
      type Implementation_Type is limited new Server_Type with private;
   package Shared_Instance is

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class);


      --  Register a monitoring agent
      procedure Register_Agent
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


      --  Create a host
      procedure Create_Host
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type);


   private
      protected Server is

         --  Register a monitoring agent
         procedure Register_Agent
            (Name : in Swagger.UString;
             Ip : in Swagger.UString;
             Agent_Key : in Swagger.UString;
             Result  : out Hyperion.Rest.Models.Agent_Type;
             Context : in out Swagger.Servers.Context_Type);

         --  Create a host
         procedure Create_Host
            (Name : in Swagger.UString;
             Ip : in Swagger.UString;
             Host_Key : in Swagger.UString;
             Result  : out Hyperion.Rest.Models.Host_Type;
             Context : in out Swagger.Servers.Context_Type);

      private
         Impl : Implementation_Type;
      end Server;
   end Shared_Instance;

end Hyperion.Rest.Skeletons;
